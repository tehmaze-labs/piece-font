#!/usr/bin/env python2

from PIL import Image, ImageDraw
import os
import struct
import sys

# Local imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'lib'))
from psf import PSF


TEXT         = ['Zelda might fix the job growth',
                '\x01plans very quickly on Monday\xff',
                'A QUICK MOVEMENT OF THE ENEMY ',
                'WILL JEOPARDIZE SIX GUNBOATS! ',
                ]


def run():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output', required=True)
    parser.add_argument('-c', '--output-char', default='-char')
    parser.add_argument('-s', '--scale-char', default=5, type=int)
    parser.add_argument('-t', '--output-text', default='-text')
    parser.add_argument('filename')

    option = parser.parse_args()

    psf = PSF(option.filename)
    num = len(psf)
    size = (16 * psf.char_width, (num / 16) * psf.char_height)
    image = Image.new('P', size)
    draws = ImageDraw.Draw(image)

    for i in range(len(psf)):
        y, x = divmod(i, 16)
        try:
            glyph = psf[i]
            glyph.paste(image, x * psf.char_width, y * psf.char_height)
        except:
            print 'error in', option.filename
            box = (
                (x + 0) * psf.char_width,
                (y + 0) * psf.char_height,
                (x + 1) * psf.char_width,
                (y + 1) * psf.char_height,
            )
            draws.rectangle(box, fill=2)

    image.save(option.output)
    base, ext = os.path.splitext(option.output)
    output_char = ''.join([base, option.output_char, ext])
    output_text = ''.join([base, option.output_text, ext])

    if option.output_char:
        size = (psf.char_width * len(psf), psf.char_height)
        image = Image.new('P', size)
        draws = ImageDraw.Draw(image)
        for x in range(len(psf)):
            try:
                psf[x].paste(image, x * psf.char_width, 0)
            except:
                box = (
                    (x + 0) * psf.char_width,
                    0,
                    (x + 1) * psf.char_width,
                    psf.char_height,
                )
                draws.rectangle(box, fill=2)

        image = image.resize(
            (size[0] * option.scale_char, size[1] * option.scale_char),
            Image.NEAREST
        )
        image.save(output_char)

    if option.output_text:
        size = (psf.char_width * len(TEXT[0]), psf.char_height * len(TEXT))
        image = Image.new('P', size)
        draws = ImageDraw.Draw(image)
        for y, text in enumerate(TEXT):
            for x, char in enumerate(bytearray(text)):
                try:
                    psf[char].paste(image, x * psf.char_width, y * psf.char_height)
                except:
                    box = (
                        (x + 0) * psf.char_width,
                        (y + 0) * psf.char_height,
                        (x + 1) * psf.char_width,
                        (y + 1) * psf.char_height,
                    )
                    draws.rectangle(box, fill=2)
        image.save(output_text)

if __name__ == '__main__':
    sys.exit(run())
